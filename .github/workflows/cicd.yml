name: Continuous Integration and Continuous Deployment

on:
  push:
    branches:
      - main
      - develop
      - release/*
  pull_request:
    branches:
      - main
      - develop
      - release/*
  workflow_dispatch:

jobs:
  versioning:
    name: Detect Next Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.PAT_TOKEN }}
      - name: Fetch all tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Git Config
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Set up initial tag if none exist
        run: |
          if [ -z "$(git tag)" ]; then
            git tag v0.0.0
            git push origin v0.0.0
            echo "Set initial version to v0.0.0"
          fi

      - name: Determine Latest Tag
        id: latest-tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag | sort -V | tail -n1)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Retrieve commit messages from last tag to HEAD
        run: |
          echo "Retrieve commit messages from ${{ env.LATEST_TAG }} to HEAD"
          echo "Commit messages from tag ${{ steps.latest-tag.outputs.tag }} to HEAD:"
          git log ${{ steps.latest-tag.outputs.tag }}..HEAD --oneline

      - name: Analyze commit messages
        run: |
          echo "Analyze commit messages on: ${{ env.LATEST_TAG }}"
          echo "minor_count=$(git log --format=%B ${{ github.event.before }}..${{ github.event.after }} | grep -c 'feat:')" >> $GITHUB_ENV
          echo "patch_count=$(git log --format=%B ${{ github.event.before }}..${{ github.event.after }} | grep -c 'fix:')" >> $GITHUB_ENV
          echo "breaking_count=$(git log --format=%B ${{ github.event.before }}..${{ github.event.after }} | grep -c 'BREAKING CHANGE:')" >> $GITHUB_ENV

      - name: Fetch PR labels and determine version bump
        id: pull_request_labels
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const payload = context.payload.pull_request
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: payload.number
            });
            const labelNames = labels.data.map(label => label.name);
            console.log("PR labels:", labelNames);

            // Determine version changes based on labels
            const hasBug = labelNames.includes('bug');
            const hasDocumentation = labelNames.includes('documentation');
            const hasEnhancement = labelNames.includes('enhancement');
            const hasDuplicate = labelNames.includes('duplicate');
            const hasGoodFirstIssue = labelNames.includes('good first issue');
            const hasHelpWanted = labelNames.includes('help wanted');
            const hasInvalid = labelNames.includes('invalid');
            const hasQuestion = labelNames.includes('question');
            const hasWontFix = labelNames.includes('wontfix');

            // Set outputs for later steps
            core.setOutput('patch', hasBug || hasDocumentation || hasDuplicate || hasGoodFirstIssue || hasHelpWanted || hasInvalid || hasQuestion || hasWontFix);
            core.setOutput('minor', hasEnhancement);
            core.setOutput('major', false); // Adjust according to your needs for breaking changes

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Determine version change
        run: |
          echo "Version change from: ${{ env.LATEST_TAG }}"
          
          # Extract MAJOR, MINOR, and PATCH parts
          MAJOR=$(echo "${{ env.LATEST_TAG }}" | cut -d '.' -f1)
          MINOR=$(echo "${{ env.LATEST_TAG }}" | cut -d '.' -f2)
          PATCH=$(echo "${{ env.LATEST_TAG }}" | cut -d '.' -f3)
          
          if [ "${{ env.breaking_count }}" -gt 0 ] || [ "${{ steps.pull_request_labels.outputs.major }}" == "true" ]; then
            echo "Major version bump required."
            if [ "${{ github.ref }}" == 'refs/heads/develop' ]; then
              NEXT_VERSION="v$(date +'%Y.%m.%d')-dev-${{ github.run_number }}-${{ github.run_attempt }}"
            else
              NEW_MAJOR=$((MAJOR + 1))
              NEXT_VERSION="${NEW_MAJOR}.${MINOR}.${PATCH}"
            fi
          elif [ "${{ env.minor_count }}" -gt 0 ] || [ "${{ steps.pull_request_labels.outputs.minor }}" == "true" ]; then
            echo "Minor version bump required."
            if [ "${{ github.ref }}" == 'refs/heads/develop' ]; then
              NEXT_VERSION="v$(date +'%Y.%m.%d')-dev-${{ github.run_number }}-${{ github.run_attempt }}"
            else
              NEW_MINOR=$((MINOR + 1))
              NEXT_VERSION="${MAJOR}.${NEW_MINOR}.${PATCH}"
            fi
          elif [ "${{ env.patch_count }}" -gt 0 ] || [ "${{ steps.pull_request_labels.outputs.patch }}" == "true" ]; then
            echo "Patch version bump required."
            if [ "${{ github.ref }}" == 'refs/heads/develop' ]; then
              NEXT_VERSION="v$(date +'%Y.%m.%d')-dev-${{ github.run_number }}-${{ github.run_attempt }}"
            else
              NEW_PATCH=$((PATCH + 1))
              NEXT_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            fi
          else
            echo "No version change required."
            NEXT_VERSION=${{ env.LATEST_TAG }}
          fi
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Save version to version.txt
        run: echo "${{ env.NEXT_VERSION }}" > artifacts/version.txt

      - name: Store version in artifact
        uses: actions/upload-artifact@v4
        with:
          name: versioning-artifacts
          path: artifacts/
          retention-days: 1
          overwrite: true

      - name: Print new version
        run: |
          echo "Next Version: $(cat artifacts/version.txt)"

  build_dev:
    name: Build Development
    runs-on: ubuntu-latest
    needs: versioning
    if: github.ref == 'refs/heads/develop' && github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.PAT_TOKEN }}

      # Retrieve versioning artifacts
      - name: Download versioning artifacts
        uses: actions/download-artifact@v4
        with:
          name: versioning-artifacts
          path: artifacts
        env:
          cache: 'none'

      # Pre-build information...
      - name: Building the development version
        run: |
          echo "Building the development version..."
          echo "Version Tag: $(cat artifacts/version.txt)"

      - name: Echo Setup Python Environment
        run: echo "Setting up Python environment and installing pip..."

      - name: Echo Install Dependencies
        run: echo "Installing dependencies using pip from requirements.txt..."

      - name: Echo Run Tests
        run: echo "Running tests using pytest or similar testing framework..."

      - name: Echo Build Package
        run: echo "Building Python package using setup.py or poetry build..."

      - name: Echo Package Validation
        run: echo "Validating the packaged files..."

      - name: Echo Prepare Artifacts
        run: echo "Preparing artifacts for storage or deployment..."

  build_rc_beta:
    name: Build Release Candidate / Beta
    runs-on: ubuntu-latest
    needs: versioning
    if: github.ref == 'refs/heads/release' && github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.PAT_TOKEN }}

      # Retrieve versioning artifacts
      - name: Download versioning artifacts
        uses: actions/download-artifact@v4
        with:
          name: versioning-artifacts
          path: artifacts
        env:
          cache: 'none'

      # Pre-build information...
      - name: Building the release candidate / beta version
        run: |
          echo "Building the release candidate / beta version..."
          echo "Version Tag: $(cat artifacts/version.txt)"

      - name: Echo Setup Python Environment
        run: echo "Setting up Python environment and updating pip to the latest version..."

      - name: Echo Install Dependencies
        run: echo "Installing dependencies required for the RC/Beta version using pip from requirements.txt..."

      - name: Echo Run Integration Tests
        run: echo "Running integration tests to ensure system-wide functionalities work as expected..."

      - name: Echo Build RC/Beta Package
        run: echo "Building the release candidate or beta version of the Python package using setup.py..."

      - name: Echo Validate RC/Beta Build
        run: echo "Validating the build integrity and compliance with pre-release standards..."

      - name: Echo Prepare RC/Beta Artifacts
        run: echo "Packaging and preparing artifacts specific to the RC/Beta for next steps in the deployment pipeline..."

  build_prod:
    name: Build Production
    runs-on: ubuntu-latest
    needs: versioning
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.PAT_TOKEN }}

      # Retrieve versioning artifacts
      - name: Download versioning artifacts
        uses: actions/download-artifact@v4
        with:
          name: versioning-artifacts
          path: artifacts
        env:
          cache: 'none'


      # Pre-build information...
      - name: Building the production version
        run: |
          echo "Building the production version..."
          echo "Version Tag: $(cat artifacts/version.txt)"

      - name: Echo Setup Python Environment
        run: echo "Setting up Python environment and ensuring all tools are ready for a production build..."

      - name: Echo Install Production Dependencies
        run: echo "Installing dependencies required for the production environment using pip from requirements.txt..."

      - name: Echo Run Security and Performance Tests
        run: echo "Running security checks and performance tests to ensure production readiness..."

      - name: Echo Build Production Package
        run: echo "Building the production version of the Python package using setup.py or poetry for optimized deployment..."

      - name: Echo Validate Production Build
        run: echo "Validating the production build for compliance with production standards and requirements..."

      - name: Echo Prepare Production Artifacts
        run: echo "Finalizing and preparing production artifacts for deployment and release..."

      - name: Echo Archive Artifacts
        run: echo "Archiving build artifacts for long-term storage and auditability..."

  pr_checks:
    name: PR Checks
    runs-on: ubuntu-latest
    needs: versioning
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.PAT_TOKEN }}

      # Retrieve versioning artifacts
      - name: Download versioning artifacts
        uses: actions/download-artifact@v4
        with:
          name: versioning-artifacts
          path: artifacts
        env:
          cache: 'none'


      # Pre-check information...
      - name: Running checks on pull requests
        run: |
          echo "Running checks on pull requests..."
          echo "Version Tag: $(cat artifacts/version.txt)"

      - name: Echo Setup Python Environment
        run: echo "Setting up Python environment appropriate for PR tests..."

      - name: Echo Install Dependencies for Testing
        run: echo "Installing dependencies required for running tests on the PR using pip..."

      - name: Echo Run Unit Tests
        run: echo "Running unit tests to validate changes in the pull request..."

      - name: Echo Run Linting
        run: echo "Executing linting to ensure code style guidelines are met..."

      - name: Echo Perform Static Code Analysis
        run: echo "Performing static code analysis to identify potential issues in the PR code..."

      - name: Echo Check for Merge Conflicts
        run: echo "Checking for any merge conflicts with the base branch..."

      - name: Echo Validate PR Documentation
        run: echo "Validating that all documentation updates are included and correct..."

  release_dev:
    name: Release Development
    runs-on: ubuntu-latest
    needs: build_dev
    if: github.ref == 'refs/heads/develop'

    steps:

      # Retrieve versioning artifacts
      - name: Download versioning artifacts
        uses: actions/download-artifact@v4
        with:
          name: versioning-artifacts
          path: artifacts
        env:
          cache: 'none'

      # Pre-release information
      - name: Releasing the development version
        run: |
          echo "Releasing the development version..."
          echo "Version Tag: $(cat artifacts/version.txt)"

      - name: Echo Finalize Development Release
        run: echo "Finalizing the development release of the Python package..."

      - name: Echo Deploy to Development Environment
        run: echo "Deploying the Python package to a development environment for internal testing and feedback..."

      - name: Echo Verify Deployment
        run: echo "Verifying that the deployment in the development environment is successful and operational..."

      - name: Echo Notify Stakeholders
        run: echo "Notifying stakeholders of the new development release for further evaluation and testing..."

  release_rc_beta:
    name: Release Release Candidate / Beta
    runs-on: ubuntu-latest
    needs: build_rc_beta
    if: github.ref == 'refs/heads/release'

    steps:

      # Retrieve versioning artifacts
      - name: Download versioning artifacts
        uses: actions/download-artifact@v4
        with:
          name: versioning-artifacts
          path: artifacts
        env:
          cache: 'none'

      # Pre-release information...
      - name: Releasing the release candidate / beta version
        run: |
          echo "Releasing the release candidate / beta version..."
          echo "Version Tag: $(cat artifacts/version.txt)"

      - name: Echo Finalize RC/Beta Release
        run: echo "Finalizing the release candidate or beta version of the Python package..."

      - name: Echo Deploy to Staging Environment
        run: echo "Deploying the release candidate or beta version to a staging environment for pre-release testing..."

      - name: Echo Verify Deployment
        run: echo "Verifying that the deployment in the staging environment is successful and ready for final user acceptance testing..."

      - name: Echo Conduct Pre-Release Tests
        run: echo "Conducting pre-release tests to ensure the stability and performance of the RC/Beta version..."

      - name: Echo Notify Stakeholders
        run: echo "Notifying stakeholders of the new RC/Beta release for final review and approval..."

  release_prod:
    name: Release Production
    runs-on: ubuntu-latest
    needs: build_prod
    if: github.ref == 'refs/heads/main'

    steps:

      # Retrieve versioning artifacts
      - name: Download versioning artifacts
        uses: actions/download-artifact@v4
        with:
          name: versioning-artifacts
          path: artifacts
        env:
          cache: 'none'        

      - name: Releasing the production version
        run: |
          echo "Releasing the production version..."
          echo "Version Tag: $(cat artifacts/version.txt)"

      - name: Echo Finalize Production Release
        run: echo "Finalizing the production version of the Python package..."

      - name: Echo Deploy to Production Environment
        run: echo "Deploying the production version of the Python package to the production environment..."

      - name: Echo Verify Deployment
        run: echo "Verifying that the deployment in the production environment is successful and the application is operational..."

      - name: Echo Perform Post-Deployment Checks
        run: echo "Performing post-deployment checks to ensure full operational capability and performance benchmarks are met..."

      - name: Echo Notify Stakeholders
        run: echo "Notifying stakeholders and customers of the successful deployment of the new production version..."